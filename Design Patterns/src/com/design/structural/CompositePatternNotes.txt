COMPOSITE PATTERN NOTES:
Composite design pattern is used when we have to represent a part-whole hierarchy.

Composite Pattern consists of following objects:
Base Component – Base component is the interface for all objects in the composition, client program uses base component to work with the objects in the composition. It can be an interface or an abstract class with some methods common to all the objects.
Leaf – Defines the behaviour for the elements in the composition. It is the building block for the composition and implements base component. It doesn’t have references to other Components.
Composite – It consists of leaf elements and implements the operations in base component.

Composite object:
A composite object contains group of leaf objects and we should provide some helper methods to add or delete leafs from the group. We can also provide a method to remove all the elements from the group.


Composite Pattern Important Points:
Composite pattern should be applied only when the group of objects should behave as the single object.
Composite design pattern can be used to create a tree like structure.
java.awt.Container#add(Component) is a great example of Composite pattern in java and used a lot in Swing.