ABSTRACT FACTORY PATTERN:
In the Abstract Factory pattern, we get rid of if-else block and have a factory class for each sub-class. Then an Abstract Factory class that will return the sub-class based on the input factory class. At first, it seems confusing but once you see the implementation, it’s really easy to grasp and understand the minor difference between Factory and Abstract Factory pattern.

Steps:
--> First of all we need to create a Abstract Factory interface or abstract class.
--> Now our factory classes will implement this interface and return their respective sub-class.
--> Create a consumer class that will provide the entry point for the client classes to create sub-classes.

Abstract Factory Design Pattern Benefits:

--> Abstract Factory design pattern provides approach to code for interface rather than implementation.
--> Abstract Factory pattern is “factory of factories” and can be easily extended to accommodate more products, for example we can add another sub-class Laptop 
	and a factory LaptopFactory.
--> Abstract Factory pattern is robust and avoid conditional logic of Factory pattern.


Abstract Factory Design Pattern Examples in JDK:

javax.xml.parsers.DocumentBuilderFactory#newInstance()
javax.xml.transform.TransformerFactory#newInstance()
javax.xml.xpath.XPathFactory#newInstance()

----------------------------------------------------------------------------------------------------------------------------------------------------------------

