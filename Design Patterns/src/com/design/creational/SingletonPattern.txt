SINGLETON DESIGN PATTERN:
Singleton pattern restricts the instantiation of a class and ensures that only one instance of the class exists in the java virtual machine.
The singleton class must provide a global access point to get the instance of the class.
Singleton pattern is used for logging, drivers objects, caching and thread pool.
Singleton design pattern is also used in other design patterns like Abstract Factory, Builder, Prototype, Facade etc.
Singleton design pattern is used in core java classes also, for example java.lang.Runtime, java.awt.Desktop.

To implement a Singleton pattern, we have different approaches but all of them have the following common concepts:
--> Private constructor to restrict instantiation of the class from other classes.
--> Private static variable of the same class that is the only instance of the class.
--> Public static method that returns the instance of the class, this is the global access point for outer world to get the instance of the singleton class.

Approaches:
--> Eager initialization
		In eager initialization, the instance of Singleton Class is created at the time of class loading, this is the easiest method to create a singleton class but it has a drawback that instance is created even though client application might not be using it. If your singleton class is not using a lot of resources, this is the approach to use. But in most of the scenarios, Singleton classes are created for resources such as File System, Database connections etc. We should avoid the instantiation until unless client calls the getInstance method. Also, this method doesn’t provide any options for exception handling.

--> Static block initialization
		Static block initialization implementation is similar to eager initialization, except that instance of class is created in the static block that provides option for exception handling. Both eager initialization and static block initialization creates the instance even before it’s being used and that is not the best practice to use. 
		
--> Lazy Initialization
		Lazy initialization method to implement Singleton pattern creates the instance in the global access method. The above implementation works fine in case of the single-threaded environment but when it comes to multithreaded systems, it can cause issues if multiple threads are inside the if condition at the same time. It will destroy the singleton pattern and both threads will get the different instances of the singleton class.
		
--> Thread Safe Singleton
		The easier way to create a thread-safe singleton class is to make the global access method synchronized, so that only one thread can execute this method at a time. Above implementation works fine and provides thread-safety but it reduces the performance because of the cost associated with the synchronized method, although we need it only for the first few threads who might create the separate instances (Read: Java Synchronization). To avoid this extra overhead every time, double checked locking principle is used.
		
--> Bill Pugh Singleton Implementation
		Java memory model had a lot of issues and the above approaches used to fail in certain scenarios where too many threads try to get the instance of the Singleton class simultaneously. So Bill Pugh came up with a different approach to create the Singleton class using an inner static helper class. When the singleton class is loaded, SingletonHelper class is not loaded into memory and only when someone calls the getInstance method, this class gets loaded and creates the Singleton class instance.
		This is the most widely used approach for Singleton class as it doesn’t require synchronization.	
		
--> Using Reflection to destroy Singleton Pattern
		Reflection can be used to destroy all the above singleton implementation approaches.
		
--> Enum Singleton
		To overcome this situation with Reflection, Joshua Bloch suggests the use of Enum to implement Singleton design pattern as Java ensures that any enum value is instantiated only once in a Java program. Since Java Enum values are globally accessible, so is the singleton. The drawback is that the enum type is somewhat inflexible; for example, it does not allow lazy initialization.
		
--> Serialization and Singleton
		Sometimes in distributed systems, we need to implement Serializable interface in Singleton class so that we can store its state in the file system and retrieve it at a later point of time. The problem with serialized singleton class is that whenever we deserialize it, it will create a new instance of the class. So it destroys the singleton pattern, to overcome this scenario all we need to do it provide the implementation of readResolve() method.

